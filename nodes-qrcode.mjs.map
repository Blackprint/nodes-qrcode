{"version":3,"sources":["_init.js","SVG.js","qrcode.js","Convert/ToElement.js"],"names":["window","module","_class2","_class3","exports","globalThis","Object","defineProperty","value","Blackprint","loadScope","url","import","meta","hasInterface","hasDocs","Context","createContext","EventSlot","slot","registerNode","Node","constructor","instance","super","this","setInterface","title","init","Input","IInput","ref","optionChange","_qrcode","QRCode","width","height","colorDark","DotColor","colorLight","BgColor","correctLevel","CorrectLevel","update","routes","routeOut","on","Output","SVGText","makeSVG","Data","input","Port","Union","String","Number","Default","output","QR8bitByte","data","mode","QRMode","MODE_8BIT_BYTE","parsedData","i","l","length","byteArray","code","charCodeAt","push","Array","prototype","concat","apply","unshift","getLength","buffer","write","put","QRCodeModel","typeNumber","errorCorrectLevel","modules","moduleCount","dataCache","dataList","addData","newData","isDark","row","col","Error","getModuleCount","make","makeImpl","getBestMaskPattern","test","maskPattern","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","r","c","minLostPoint","pattern","lostPoint","QRUtil","getLostPoint","pos","getPatternPosition","j","bits","getBCHTypeNumber","mod","Math","floor","getBCHTypeInfo","inc","bitIndex","byteIndex","dark","getMask","static","rsBlocks","QRRSBlock","getRSBlocks","QRBitBuffer","getLengthInBits","totalDataCount","dataCount","putBit","PAD0","PAD1","createBytes","offset","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","ecCount","totalCount","max","rsPoly","getErrorCorrectPolynomial","modPoly","QRPolynomial","modIndex","get","totalCodeCount","index","MODE_NUMBER","MODE_ALPHA_NUM","MODE_KANJI","QRErrorCorrectLevel","L","M","Q","H","QRMaskPattern","PATTERN_POSITION_TABLE","G15","G18","G15_MASK","d","getBCHDigit","digit","errorCorrectLength","a","multiply","QRMath","gexp","type","qrCode","sameCount","count","darkCount","abs","glog","n","LOG_TABLE","EXP_TABLE","num","shift","undefined","e","ratio","rsBlock","getRsBlockTable","list","RS_BLOCK_TABLE","bufIndex","bit","QRCodeLimitLength","_getTypeNumber","text","nCorrectLevel","nType","replacedText","encodeURI","replace","_getUTF8Length","len","option","_opt","model","nCount","svg","imported","iface","_element","DivElement","document","createElement","innerHTML","Element","firstElementChild","SVGElement","HTMLDivElement","registerInterface","IFace","ToElement","Interface"],"mappings":"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AA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,GAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,GAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,IAAA,GAAA,IAAA,KAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,KAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,IAAA,EAAA,IAAA,KAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,GAAA,GAAA,GAAA,EA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","file":"nodes-qrcode.mjs","sourcesContent":["// Let the Blackprint Editor know the source URL where\n// the registerNode and registerInterface belongs to\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n\n\t// This will autoload (*.sf.mjs) and (*.sf.css) file for Browser\n\thasInterface: true,\n\n\t// This will autoload (*.docs.json) for Browser\n\thasDocs: true,\n});\n\n// Global shared context (share to _init.sf)\nlet Context = Blackprint.createContext('QRCode');\n\n// This is needed to avoid duplicated event listener when using hot reload\n// Event listener that registered with same slot will be replaced\nContext.EventSlot = {slot: 'my-private-event-slot'};","/** \n * Create QRCode from text data\n * @blackprint node\n */\nBlackprint.registerNode(\"QRCode/SVG\",\nclass InstanceNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Text data that will be converted to QRCode */\n\t\tData: Blackprint.Port.Union([String, Number]),\n\t\t/** QRCode's background color */\n\t\tBgColor: Blackprint.Port.Default(String, '#fff'),\n\t\t/** QRCode's dot color */\n\t\tDotColor: Blackprint.Port.Default(String, '#000'),\n\t\t/**\n\t\t * QRCode's correction level (H, M, L)\n\t\t * Default to High correction level (H)\n\t\t * @menu\n\t\t * - [H]:(High) = high correction level\n\t\t * - [M]:(Medium) = medium correction level\n\t\t * - [L]:(Low) = low correction level\n\t\t */\n\t\tCorrectLevel: Blackprint.Port.Default(String, 'H'),\n\t};\n\n\tstatic output = {\n\t\t/** SVG text in XML format */\n\t\tSVGText: String,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"QRCode SVG\";\n\t}\n\n\tinit(){\n\t\tlet { Input, IInput } = this.ref;\n\t\tlet optionChange = () => {\n\t\t\tthis._qrcode = new QRCode({\n\t\t\t\twidth: '100%',\n\t\t\t\theight: '100%',\n\t\t\t\tcolorDark: Input.DotColor,\n\t\t\t\tcolorLight: Input.BgColor,\n\t\t\t\tcorrectLevel: Input.CorrectLevel || 'H',\n\t\t\t});\n\n\t\t\tthis.update();\n\t\t\tthis.routes.routeOut();\n\t\t};\n\n\t\toptionChange();\n\t\tIInput.BgColor.on(\"value\", Context.EventSlot, optionChange);\n\t\tIInput.DotColor.on(\"value\", Context.EventSlot, optionChange);\n\t\tIInput.CorrectLevel.on(\"value\", Context.EventSlot, optionChange);\n\t}\n\n\tupdate(){\n\t\tif(this._qrcode == null) return;\n\n\t\tlet { Input, Output } = this.ref;\n\t\tOutput.SVGText = this._qrcode.makeSVG(Input.Data ?? '');\n\t}\n});","/**\n * Modified from: https://github.com/davidshimjs/qrcodejs/blob/master/qrcode.js\n * - Use class, remove render to canvas, remove unused code, use strict equal, use if else instead of switch, etc\n * \n * @see <a href=\"http://www.d-project.com/\" target=\"_blank\">http://www.d-project.com/</a>\n * @see <a href=\"http://jeromeetienne.github.com/jquery-qrcode/\" target=\"_blank\">http://jeromeetienne.github.com/jquery-qrcode/</a>\n */\n\n//---------------------------------------------------------------------\n// QRCode for JavaScript (MIT license)\n// Copyright (c) 2009 Kazuhiko Arase\n// URL: http://www.d-project.com/\n//\n// The word \"QR Code\" is registered trademark of \n// DENSO WAVE INCORPORATED\n//   http://www.denso-wave.com/qrcode/faqpatent-e.html\n//---------------------------------------------------------------------\nclass QR8bitByte{\n\tconstructor(data) {\n\t\tthis.mode = QRMode.MODE_8BIT_BYTE;\n\t\tthis.data = data;\n\t\tthis.parsedData = [];\n\n\t\t// Added to support UTF-8 Characters\n\t\tfor (var i = 0, l = this.data.length; i < l; i++) {\n\t\t\tvar byteArray = [];\n\t\t\tvar code = this.data.charCodeAt(i);\n\n\t\t\tif (code > 0x10000) {\n\t\t\t\tbyteArray[0] = 0xF0 | ((code & 0x1C0000) >>> 18);\n\t\t\t\tbyteArray[1] = 0x80 | ((code & 0x3F000) >>> 12);\n\t\t\t\tbyteArray[2] = 0x80 | ((code & 0xFC0) >>> 6);\n\t\t\t\tbyteArray[3] = 0x80 | (code & 0x3F);\n\t\t\t} else if (code > 0x800) {\n\t\t\t\tbyteArray[0] = 0xE0 | ((code & 0xF000) >>> 12);\n\t\t\t\tbyteArray[1] = 0x80 | ((code & 0xFC0) >>> 6);\n\t\t\t\tbyteArray[2] = 0x80 | (code & 0x3F);\n\t\t\t} else if (code > 0x80) {\n\t\t\t\tbyteArray[0] = 0xC0 | ((code & 0x7C0) >>> 6);\n\t\t\t\tbyteArray[1] = 0x80 | (code & 0x3F);\n\t\t\t} else {\n\t\t\t\tbyteArray[0] = code;\n\t\t\t}\n\n\t\t\tthis.parsedData.push(byteArray);\n\t\t}\n\n\t\tthis.parsedData = Array.prototype.concat.apply([], this.parsedData);\n\n\t\tif (this.parsedData.length != this.data.length) {\n\t\t\tthis.parsedData.unshift(191);\n\t\t\tthis.parsedData.unshift(187);\n\t\t\tthis.parsedData.unshift(239);\n\t\t}\n\t}\n\tgetLength(buffer) {\n\t\treturn this.parsedData.length;\n\t}\n\twrite(buffer) {\n\t\tfor (var i = 0, l = this.parsedData.length; i < l; i++) {\n\t\t\tbuffer.put(this.parsedData[i], 8);\n\t\t}\n\t}\n}\n\nclass QRCodeModel {\n\tstatic PAD0 = 0xEC;\n\tstatic PAD1 = 0x11;\n\n\tconstructor(typeNumber, errorCorrectLevel) {\n\t\tthis.typeNumber = typeNumber;\n\t\tthis.errorCorrectLevel = errorCorrectLevel;\n\t\tthis.modules = null;\n\t\tthis.moduleCount = 0;\n\t\tthis.dataCache = null;\n\t\tthis.dataList = [];\n\t}\n\t\n\taddData(data) {\n\t\tvar newData = new QR8bitByte(data);\n\t\tthis.dataList.push(newData);\n\t\tthis.dataCache = null;\n\t}\n\n\tisDark(row, col) {\n\t\tif (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n\t\t\tthrow new Error(row + \",\" + col);\n\t\t}\n\t\treturn this.modules[row][col];\n\t}\n\n\tgetModuleCount() {\n\t\treturn this.moduleCount;\n\t}\n\n\tmake() {\n\t\tthis.makeImpl(false, this.getBestMaskPattern());\n\t}\n\n\tmakeImpl(test, maskPattern) {\n\t\tthis.moduleCount = this.typeNumber * 4 + 17;\n\t\tthis.modules = new Array(this.moduleCount);\n\t\tfor (var row = 0; row < this.moduleCount; row++) {\n\t\t\tthis.modules[row] = new Array(this.moduleCount);\n\t\t\tfor (var col = 0; col < this.moduleCount; col++) {\n\t\t\t\tthis.modules[row][col] = null;\n\t\t\t}\n\t\t}\n\t\tthis.setupPositionProbePattern(0, 0);\n\t\tthis.setupPositionProbePattern(this.moduleCount - 7, 0);\n\t\tthis.setupPositionProbePattern(0, this.moduleCount - 7);\n\t\tthis.setupPositionAdjustPattern();\n\t\tthis.setupTimingPattern();\n\t\tthis.setupTypeInfo(test, maskPattern);\n\t\tif (this.typeNumber >= 7) {\n\t\t\tthis.setupTypeNumber(test);\n\t\t}\n\t\tif (this.dataCache == null) {\n\t\t\tthis.dataCache = QRCodeModel.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n\t\t}\n\t\tthis.mapData(this.dataCache, maskPattern);\n\t}\n\n\tsetupPositionProbePattern(row, col) {\n\t\tfor (var r = -1; r <= 7; r++) {\n\t\t\tif (row + r <= -1 || this.moduleCount <= row + r)\n\t\t\t\tcontinue;\n\t\t\tfor (var c = -1; c <= 7; c++) {\n\t\t\t\tif (col + c <= -1 || this.moduleCount <= col + c)\n\t\t\t\t\tcontinue;\n\t\t\t\tif ((0 <= r && r <= 6 && (c === 0 || c === 6)) || (0 <= c && c <= 6 && (r === 0 || r === 6)) || (2 <= r && r <= 4 && 2 <= c && c <= 4)) {\n\t\t\t\t\tthis.modules[row + r][col + c] = true;\n\t\t\t\t} else {\n\t\t\t\t\tthis.modules[row + r][col + c] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetBestMaskPattern() {\n\t\tvar minLostPoint = 0;\n\t\tvar pattern = 0;\n\t\tfor (var i = 0; i < 8; i++) {\n\t\t\tthis.makeImpl(true, i);\n\t\t\tvar lostPoint = QRUtil.getLostPoint(this);\n\t\t\tif (i === 0 || minLostPoint > lostPoint) {\n\t\t\t\tminLostPoint = lostPoint;\n\t\t\t\tpattern = i;\n\t\t\t}\n\t\t}\n\t\treturn pattern;\n\t}\n\n\tsetupTimingPattern() {\n\t\tfor (var r = 8; r < this.moduleCount - 8; r++) {\n\t\t\tif (this.modules[r][6] != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.modules[r][6] = (r % 2 === 0);\n\t\t}\n\t\tfor (var c = 8; c < this.moduleCount - 8; c++) {\n\t\t\tif (this.modules[6][c] != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.modules[6][c] = (c % 2 === 0);\n\t\t}\n\t}\n\n\tsetupPositionAdjustPattern() {\n\t\tvar pos = QRUtil.getPatternPosition(this.typeNumber);\n\t\tfor (var i = 0; i < pos.length; i++) {\n\t\t\tfor (var j = 0; j < pos.length; j++) {\n\t\t\t\tvar row = pos[i];\n\t\t\t\tvar col = pos[j];\n\t\t\t\tif (this.modules[row][col] != null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (var r = -2; r <= 2; r++) {\n\t\t\t\t\tfor (var c = -2; c <= 2; c++) {\n\t\t\t\t\t\tif (r === -2 || r === 2 || c === -2 || c === 2 || (r === 0 && c === 0)) {\n\t\t\t\t\t\t\tthis.modules[row + r][col + c] = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.modules[row + r][col + c] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tsetupTypeNumber(test) {\n\t\tvar bits = QRUtil.getBCHTypeNumber(this.typeNumber);\n\t\tfor (var i = 0; i < 18; i++) {\n\t\t\tvar mod = (!test && ((bits >> i) & 1) === 1);\n\t\t\tthis.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n\t\t}\n\t\tfor (var i = 0; i < 18; i++) {\n\t\t\tvar mod = (!test && ((bits >> i) & 1) === 1);\n\t\t\tthis.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n\t\t}\n\t}\n\n\tsetupTypeInfo(test, maskPattern) {\n\t\tvar data = (this.errorCorrectLevel << 3) | maskPattern;\n\t\tvar bits = QRUtil.getBCHTypeInfo(data);\n\t\tfor (var i = 0; i < 15; i++) {\n\t\t\tvar mod = (!test && ((bits >> i) & 1) === 1);\n\t\t\tif (i < 6) {\n\t\t\t\tthis.modules[i][8] = mod;\n\t\t\t} else if (i < 8) {\n\t\t\t\tthis.modules[i + 1][8] = mod;\n\t\t\t} else {\n\t\t\t\tthis.modules[this.moduleCount - 15 + i][8] = mod;\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < 15; i++) {\n\t\t\tvar mod = (!test && ((bits >> i) & 1) === 1);\n\t\t\tif (i < 8) {\n\t\t\t\tthis.modules[8][this.moduleCount - i - 1] = mod;\n\t\t\t} else if (i < 9) {\n\t\t\t\tthis.modules[8][15 - i - 1 + 1] = mod;\n\t\t\t} else {\n\t\t\t\tthis.modules[8][15 - i - 1] = mod;\n\t\t\t}\n\t\t}\n\t\tthis.modules[this.moduleCount - 8][8] = (!test);\n\t}\n\n\tmapData(data, maskPattern) {\n\t\tvar inc = -1;\n\t\tvar row = this.moduleCount - 1;\n\t\tvar bitIndex = 7;\n\t\tvar byteIndex = 0;\n\t\tfor (var col = this.moduleCount - 1; col > 0; col -= 2) {\n\t\t\tif (col === 6)\n\t\t\t\tcol--;\n\t\t\twhile (true) {\n\t\t\t\tfor (var c = 0; c < 2; c++) {\n\t\t\t\t\tif (this.modules[row][col - c] == null) {\n\t\t\t\t\t\tvar dark = false;\n\t\t\t\t\t\tif (byteIndex < data.length) {\n\t\t\t\t\t\t\tdark = (((data[byteIndex] >>> bitIndex) & 1) === 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar mask = QRUtil.getMask(maskPattern, row, col - c);\n\t\t\t\t\t\tif (mask) {\n\t\t\t\t\t\t\tdark = !dark;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.modules[row][col - c] = dark;\n\t\t\t\t\t\tbitIndex--;\n\t\t\t\t\t\tif (bitIndex === -1) {\n\t\t\t\t\t\t\tbyteIndex++;\n\t\t\t\t\t\t\tbitIndex = 7;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trow += inc;\n\t\t\t\tif (row < 0 || this.moduleCount <= row) {\n\t\t\t\t\trow -= inc;\n\t\t\t\t\tinc = -inc;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic createData(typeNumber, errorCorrectLevel, dataList) {\n\t\tvar rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n\t\tvar buffer = new QRBitBuffer();\n\t\tfor (var i = 0; i < dataList.length; i++) {\n\t\t\tvar data = dataList[i];\n\t\t\tbuffer.put(data.mode, 4);\n\t\t\tbuffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));\n\t\t\tdata.write(buffer);\n\t\t}\n\t\tvar totalDataCount = 0;\n\t\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\t\ttotalDataCount += rsBlocks[i].dataCount;\n\t\t}\n\t\tif (buffer.getLengthInBits() > totalDataCount * 8) {\n\t\t\tthrow new Error(\"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\");\n\t\t}\n\t\tif (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n\t\t\tbuffer.put(0, 4);\n\t\t}\n\t\twhile (buffer.getLengthInBits() % 8 != 0) {\n\t\t\tbuffer.putBit(false);\n\t\t}\n\t\twhile (true) {\n\t\t\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbuffer.put(QRCodeModel.PAD0, 8);\n\t\t\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbuffer.put(QRCodeModel.PAD1, 8);\n\t\t}\n\t\treturn QRCodeModel.createBytes(buffer, rsBlocks);\n\t}\n\t\n\tstatic createBytes(buffer, rsBlocks) {\n\t\tvar offset = 0;\n\t\tvar maxDcCount = 0;\n\t\tvar maxEcCount = 0;\n\t\tvar dcdata = new Array(rsBlocks.length);\n\t\tvar ecdata = new Array(rsBlocks.length);\n\t\tfor (var r = 0; r < rsBlocks.length; r++) {\n\t\t\tvar dcCount = rsBlocks[r].dataCount;\n\t\t\tvar ecCount = rsBlocks[r].totalCount - dcCount;\n\t\t\tmaxDcCount = Math.max(maxDcCount, dcCount);\n\t\t\tmaxEcCount = Math.max(maxEcCount, ecCount);\n\t\t\tdcdata[r] = new Array(dcCount);\n\t\t\tfor (var i = 0; i < dcdata[r].length; i++) {\n\t\t\t\tdcdata[r][i] = 0xff & buffer.buffer[i + offset];\n\t\t\t}\n\t\t\toffset += dcCount;\n\t\t\tvar rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n\t\t\tvar rawPoly = new QRPolynomial(dcdata[r],rsPoly.getLength() - 1);\n\t\t\tvar modPoly = rawPoly.mod(rsPoly);\n\t\t\tecdata[r] = new Array(rsPoly.getLength() - 1);\n\t\t\tfor (var i = 0; i < ecdata[r].length; i++) {\n\t\t\t\tvar modIndex = i + modPoly.getLength() - ecdata[r].length;\n\t\t\t\tecdata[r][i] = (modIndex >= 0) ? modPoly.get(modIndex) : 0;\n\t\t\t}\n\t\t}\n\t\tvar totalCodeCount = 0;\n\t\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\t\ttotalCodeCount += rsBlocks[i].totalCount;\n\t\t}\n\t\tvar data = new Array(totalCodeCount);\n\t\tvar index = 0;\n\t\tfor (var i = 0; i < maxDcCount; i++) {\n\t\t\tfor (var r = 0; r < rsBlocks.length; r++) {\n\t\t\t\tif (i < dcdata[r].length) {\n\t\t\t\t\tdata[index++] = dcdata[r][i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < maxEcCount; i++) {\n\t\t\tfor (var r = 0; r < rsBlocks.length; r++) {\n\t\t\t\tif (i < ecdata[r].length) {\n\t\t\t\t\tdata[index++] = ecdata[r][i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn data;\n\t}\n};\n\nvar QRMode = {\n\tMODE_NUMBER: 1 << 0,\n\tMODE_ALPHA_NUM: 1 << 1,\n\tMODE_8BIT_BYTE: 1 << 2,\n\tMODE_KANJI: 1 << 3\n};\nvar QRErrorCorrectLevel = {L: 1,M: 0,Q: 3,H: 2};\nvar QRMaskPattern = {\n\tPATTERN000: 0,\n\tPATTERN001: 1,\n\tPATTERN010: 2,\n\tPATTERN011: 3,\n\tPATTERN100: 4,\n\tPATTERN101: 5,\n\tPATTERN110: 6,\n\tPATTERN111: 7\n};\nvar QRUtil = {\n\tPATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],\n\tG15: (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),\n\tG18: (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),\n\tG15_MASK: (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1),\n\tgetBCHTypeInfo(data) {\n\t\tvar d = data << 10;\n\t\twhile (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n\t\t\td ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15)));\n\t\t}\n\t\treturn ((data << 10) | d) ^ QRUtil.G15_MASK;\n\t},\n\tgetBCHTypeNumber(data) {\n\t\tvar d = data << 12;\n\t\twhile (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n\t\t\td ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18)));\n\t\t}\n\t\treturn (data << 12) | d;\n\t},\n\tgetBCHDigit(data) {\n\t\tvar digit = 0;\n\t\twhile (data != 0) {\n\t\t\tdigit++;\n\t\t\tdata >>>= 1;\n\t\t}\n\t\treturn digit;\n\t},\n\tgetPatternPosition(typeNumber) {\n\t\treturn QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n\t},\n\tgetMask(maskPattern, i, j) {\n\t\tif(maskPattern === QRMaskPattern.PATTERN000)\n\t\t\treturn (i + j) % 2 === 0;\n\t\tif(maskPattern === QRMaskPattern.PATTERN001)\n\t\t\treturn i % 2 === 0;\n\t\tif(maskPattern === QRMaskPattern.PATTERN010)\n\t\t\treturn j % 3 === 0;\n\t\tif(maskPattern === QRMaskPattern.PATTERN011)\n\t\t\treturn (i + j) % 3 === 0;\n\t\tif(maskPattern === QRMaskPattern.PATTERN100)\n\t\t\treturn (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\n\t\tif(maskPattern === QRMaskPattern.PATTERN101)\n\t\t\treturn (i * j) % 2 + (i * j) % 3 === 0;\n\t\tif(maskPattern === QRMaskPattern.PATTERN110)\n\t\t\treturn ((i * j) % 2 + (i * j) % 3) % 2 === 0;\n\t\tif(maskPattern === QRMaskPattern.PATTERN111)\n\t\t\treturn ((i * j) % 3 + (i + j) % 2) % 2 === 0;\n\n\t\tthrow new Error(\"bad maskPattern:\" + maskPattern);\n\t},\n\tgetErrorCorrectPolynomial(errorCorrectLength) {\n\t\tvar a = new QRPolynomial([1],0);\n\t\tfor (var i = 0; i < errorCorrectLength; i++) {\n\t\t\ta = a.multiply(new QRPolynomial([1, QRMath.gexp(i)],0));\n\t\t}\n\t\treturn a;\n\t},\n\tgetLengthInBits(mode, type) {\n\t\tif (1 <= type && type < 10) {\n\t\t\tif(mode === QRMode.MODE_NUMBER)\n\t\t\t\treturn 10;\n\t\t\tif(mode === QRMode.MODE_ALPHA_NUM)\n\t\t\t\treturn 9;\n\t\t\tif(mode === QRMode.MODE_8BIT_BYTE)\n\t\t\t\treturn 8;\n\t\t\tif(mode === QRMode.MODE_KANJI)\n\t\t\t\treturn 8;\n\t\t\telse throw new Error(\"mode:\" + mode);\n\t\t}\n\t\telse if (type < 27) {\n\t\t\tif(mode === QRMode.MODE_NUMBER)\n\t\t\t\treturn 12;\n\t\t\tif(mode === QRMode.MODE_ALPHA_NUM)\n\t\t\t\treturn 11;\n\t\t\tif(mode === QRMode.MODE_8BIT_BYTE)\n\t\t\t\treturn 16;\n\t\t\tif(mode === QRMode.MODE_KANJI)\n\t\t\t\treturn 10;\n\t\t\telse throw new Error(\"mode:\" + mode);\n\t\t}\n\t\telse if (type < 41) {\n\t\t\tif(mode === QRMode.MODE_NUMBER)\n\t\t\t\treturn 14;\n\t\t\tif(mode === QRMode.MODE_ALPHA_NUM)\n\t\t\t\treturn 13;\n\t\t\tif(mode === QRMode.MODE_8BIT_BYTE)\n\t\t\t\treturn 16;\n\t\t\tif(mode === QRMode.MODE_KANJI)\n\t\t\t\treturn 12;\n\t\t\telse throw new Error(\"mode:\" + mode);\n\t\t}\n\t\telse throw new Error(\"type:\" + type);\n\t},\n\tgetLostPoint(qrCode) {\n\t\tvar moduleCount = qrCode.getModuleCount();\n\t\tvar lostPoint = 0;\n\t\tfor (var row = 0; row < moduleCount; row++) {\n\t\t\tfor (var col = 0; col < moduleCount; col++) {\n\t\t\t\tvar sameCount = 0;\n\t\t\t\tvar dark = qrCode.isDark(row, col);\n\t\t\t\tfor (var r = -1; r <= 1; r++) {\n\t\t\t\t\tif (row + r < 0 || moduleCount <= row + r) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfor (var c = -1; c <= 1; c++) {\n\t\t\t\t\t\tif (col + c < 0 || moduleCount <= col + c) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (r === 0 && c === 0) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (dark === qrCode.isDark(row + r, col + c)) {\n\t\t\t\t\t\t\tsameCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (sameCount > 5) {\n\t\t\t\t\tlostPoint += (3 + sameCount - 5);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (var row = 0; row < moduleCount - 1; row++) {\n\t\t\tfor (var col = 0; col < moduleCount - 1; col++) {\n\t\t\t\tvar count = 0;\n\t\t\t\tif (qrCode.isDark(row, col))\n\t\t\t\t\tcount++;\n\t\t\t\tif (qrCode.isDark(row + 1, col))\n\t\t\t\t\tcount++;\n\t\t\t\tif (qrCode.isDark(row, col + 1))\n\t\t\t\t\tcount++;\n\t\t\t\tif (qrCode.isDark(row + 1, col + 1))\n\t\t\t\t\tcount++;\n\t\t\t\tif (count === 0 || count === 4) {\n\t\t\t\t\tlostPoint += 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (var row = 0; row < moduleCount; row++) {\n\t\t\tfor (var col = 0; col < moduleCount - 6; col++) {\n\t\t\t\tif (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {\n\t\t\t\t\tlostPoint += 40;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (var col = 0; col < moduleCount; col++) {\n\t\t\tfor (var row = 0; row < moduleCount - 6; row++) {\n\t\t\t\tif (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {\n\t\t\t\t\tlostPoint += 40;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar darkCount = 0;\n\t\tfor (var col = 0; col < moduleCount; col++) {\n\t\t\tfor (var row = 0; row < moduleCount; row++) {\n\t\t\t\tif (qrCode.isDark(row, col)) {\n\t\t\t\t\tdarkCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n\t\tlostPoint += ratio * 10;\n\t\treturn lostPoint;\n\t}\n};\nvar QRMath = {\n\tglog(n) {\n\t\tif (n < 1) {\n\t\t\tthrow new Error(\"glog(\" + n + \")\");\n\t\t}\n\t\treturn QRMath.LOG_TABLE[n];\n\t},\n\tgexp(n) {\n\t\twhile (n < 0) {\n\t\t\tn += 255;\n\t\t}\n\t\twhile (n >= 256) {\n\t\t\tn -= 255;\n\t\t}\n\t\treturn QRMath.EXP_TABLE[n];\n\t},\n\tEXP_TABLE: new Array(256),\n\tLOG_TABLE: new Array(256)\n};\nfor (var i = 0; i < 8; i++) {\n\tQRMath.EXP_TABLE[i] = 1 << i;\n}\nfor (var i = 8; i < 256; i++) {\n\tQRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n}\nfor (var i = 0; i < 255; i++) {\n\tQRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n}\n\nclass QRPolynomial{\n\tconstructor(num, shift) {\n\t\tif (num.length == undefined) {\n\t\t\tthrow new Error(num.length + \"/\" + shift);\n\t\t}\n\t\tvar offset = 0;\n\t\twhile (offset < num.length && num[offset] == 0) {\n\t\t\toffset++;\n\t\t}\n\t\tthis.num = new Array(num.length - offset + shift);\n\t\tfor (var i = 0; i < num.length - offset; i++) {\n\t\t\tthis.num[i] = num[i + offset];\n\t\t}\n\t}\n\tget(index) {\n\t\treturn this.num[index];\n\t}\n\tgetLength() {\n\t\treturn this.num.length;\n\t}\n\tmultiply(e) {\n\t\tvar num = new Array(this.getLength() + e.getLength() - 1);\n\t\tfor (var i = 0; i < this.getLength(); i++) {\n\t\t\tfor (var j = 0; j < e.getLength(); j++) {\n\t\t\t\tnum[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));\n\t\t\t}\n\t\t}\n\t\treturn new QRPolynomial(num,0);\n\t}\n\tmod(e) {\n\t\tif (this.getLength() - e.getLength() < 0) {\n\t\t\treturn this;\n\t\t}\n\t\tvar ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0));\n\t\tvar num = new Array(this.getLength());\n\t\tfor (var i = 0; i < this.getLength(); i++) {\n\t\t\tnum[i] = this.get(i);\n\t\t}\n\t\tfor (var i = 0; i < e.getLength(); i++) {\n\t\t\tnum[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);\n\t\t}\n\t\treturn new QRPolynomial(num,0).mod(e);\n\t}\n};\n\nclass QRRSBlock{\n\tconstructor(totalCount, dataCount) {\n\t\tthis.totalCount = totalCount;\n\t\tthis.dataCount = dataCount;\n\t}\n\n\tstatic RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\tstatic getRSBlocks(typeNumber, errorCorrectLevel) {\n\t\tvar rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\t\tif (rsBlock == undefined) {\n\t\t\tthrow new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n\t\t}\n\t\tvar length = rsBlock.length / 3;\n\t\tvar list = [];\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tvar count = rsBlock[i * 3 + 0];\n\t\t\tvar totalCount = rsBlock[i * 3 + 1];\n\t\t\tvar dataCount = rsBlock[i * 3 + 2];\n\t\t\tfor (var j = 0; j < count; j++) {\n\t\t\t\tlist.push(new QRRSBlock(totalCount,dataCount));\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tstatic getRsBlockTable(typeNumber, errorCorrectLevel) {\n\t\tif(errorCorrectLevel === QRErrorCorrectLevel.L)\n\t\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\t\tif(errorCorrectLevel === QRErrorCorrectLevel.M)\n\t\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\t\tif(errorCorrectLevel === QRErrorCorrectLevel.Q)\n\t\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\t\tif(errorCorrectLevel === QRErrorCorrectLevel.H)\n\t\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\t\treturn undefined;\n\t}\n}\n\nclass QRBitBuffer {\n\tconstructor() {\n\t\tthis.buffer = [];\n\t\tthis.length = 0;\n\t}\n\tget(index) {\n\t\tvar bufIndex = Math.floor(index / 8);\n\t\treturn ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1;\n\t}\n\tput(num, length) {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tthis.putBit(((num >>> (length - i - 1)) & 1) === 1);\n\t\t}\n\t}\n\tgetLengthInBits() {\n\t\treturn this.length;\n\t}\n\tputBit(bit) {\n\t\tvar bufIndex = Math.floor(this.length / 8);\n\t\tif (this.buffer.length <= bufIndex) {\n\t\t\tthis.buffer.push(0);\n\t\t}\n\t\tif (bit) {\n\t\t\tthis.buffer[bufIndex] |= (0x80 >>> (this.length % 8));\n\t\t}\n\t\tthis.length++;\n\t}\n};\n\nvar QRCodeLimitLength = [[17, 14, 11, 7], [32, 26, 20, 14], [53, 42, 32, 24], [78, 62, 46, 34], [106, 84, 60, 44], [134, 106, 74, 58], [154, 122, 86, 64], [192, 152, 108, 84], [230, 180, 130, 98], [271, 213, 151, 119], [321, 251, 177, 137], [367, 287, 203, 155], [425, 331, 241, 177], [458, 362, 258, 194], [520, 412, 292, 220], [586, 450, 322, 250], [644, 504, 364, 280], [718, 560, 394, 310], [792, 624, 442, 338], [858, 666, 482, 382], [929, 711, 509, 403], [1003, 779, 565, 439], [1091, 857, 611, 461], [1171, 911, 661, 511], [1273, 997, 715, 535], [1367, 1059, 751, 593], [1465, 1125, 805, 625], [1528, 1190, 868, 658], [1628, 1264, 908, 698], [1732, 1370, 982, 742], [1840, 1452, 1030, 790], [1952, 1538, 1112, 842], [2068, 1628, 1168, 898], [2188, 1722, 1228, 958], [2303, 1809, 1283, 983], [2431, 1911, 1351, 1051], [2563, 1989, 1423, 1093], [2699, 2099, 1499, 1139], [2809, 2213, 1579, 1219], [2953, 2331, 1663, 1273]];\n\n/**\n * Get the type by string length\n * \n * @private\n * @param {String} text\n * @param {Number} nCorrectLevel\n * @return {Number} type\n */\nfunction _getTypeNumber(text, nCorrectLevel) {\t\t\t\n\tvar nType = 1;\n\tvar length = _getUTF8Length(text);\n\n\tfor (var i = 0, len = QRCodeLimitLength.length; i < len; i++) {\n\t\tif(nCorrectLevel === QRErrorCorrectLevel.L)\n\t\t\tif(length <= QRCodeLimitLength[i][0]) break;\n\t\tif(nCorrectLevel === QRErrorCorrectLevel.M)\n\t\t\tif(length <= QRCodeLimitLength[i][1]) break;\n\t\tif(nCorrectLevel === QRErrorCorrectLevel.Q)\n\t\t\tif(length <= QRCodeLimitLength[i][2]) break;\n\t\tif(nCorrectLevel === QRErrorCorrectLevel.H)\n\t\t\tif(length <= QRCodeLimitLength[i][3]) break;\n\n\t\tnType++;\n\t}\n\n\tif(nType > QRCodeLimitLength.length)\n\t\tthrow new Error(\"Too long data\");\n\n\treturn nType;\n}\n\nfunction _getUTF8Length(text) {\n\tvar replacedText = encodeURI(text).replace(/\\%[0-9a-fA-F]{2}/g, 'a');\n\treturn replacedText.length + (replacedText.length != text ? 3 : 0);\n}\n\nclass QRCode {\n\tstatic CorrectLevel = QRErrorCorrectLevel;\n\n\t/**\n\t * @param {Object|String} option\n\t * @param {String} option.text QRCode link data\n\t * @param {Number} [option.width=100%]\n\t * @param {Number} [option.height=100%]\n\t * @param {String} [option.colorDark=\"#000000\"]\n\t * @param {String} [option.colorLight=\"#ffffff\"]\n\t * @param {String} [option.correctLevel=\"H\"] [L|M|Q|H] \n\t */\n\tconstructor(option) {\n\t\toption ??= {};\n\t\tthis._opt = {\n\t\t\twidth: option.width ?? '100%',\n\t\t\theight: option.height ?? '100%',\n\t\t\tcolorDark: option.colorDark ?? \"#000000\",\n\t\t\tcolorLight: option.colorLight ?? \"#ffffff\",\n\t\t\tcorrectLevel: QRErrorCorrectLevel[option.correctLevel ?? 'H']\n\t\t};\n\t}\n\n\t/**\n\t * Make the QRCode\n\t * @param {String} text data\n\t */\n\tmakeSVG(text) {\n\t\tlet {width, height, colorLight, colorDark, correctLevel} = this._opt;\n\n\t\tlet model = new QRCodeModel(_getTypeNumber(text, correctLevel), correctLevel);\n\t\tmodel.addData(text);\n\t\tmodel.make();\n\n\t\tvar nCount = model.getModuleCount();\n\t\tlet svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${nCount} ${nCount}\" width=\"${width}\" height=\"${height}\">\n\t\t\t<rect fill=\"${colorLight}\" width=\"${nCount}\" height=\"${nCount}\"></rect>\n\t\t`.replace(/[\\t\\n\\r]/g, '');\n\n\t\t// svg += `<circle fill=\"${colorDark}\" cx=\"0.5\" cy=\"0.5\" r=\"2.8%\" id=\"t\"></circle>`;\n\t\tsvg += `<rect fill=\"${colorDark}\" width=\"1\" height=\"1\" id=\"t\"></rect>`;\n\n\t\tfor (var row = 0; row < nCount; row++) {\n\t\t\tfor (var col = 0; col < nCount; col++) {\n\t\t\t\tif (model.isDark(row, col))\n\t\t\t\t\tsvg += `<use href=\"#t\" x=\"${col}\" y=\"${row}\"></use>`\n\t\t\t}\n\t\t}\n\n\t\treturn svg + `</svg>`;\n\t}\n}\n\n// window.QRCode = QRCode;\n","/** \n * This node can be used to convert SVGText into HTML Element\n * @blackprint node\n */\nBlackprint.registerNode(\"QRCode/Convert/ToElement\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Output from SVGText port */\n\t\tString,\n\t};\n\tstatic output = {\n\t\t/** SVG Element */\n\t\tElement: window.SVGElement,\n\n\t\t/** SVG Element inside of a div container */\n\t\tDivElement: window.HTMLDivElement,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface('BPIC/QRCode/Convert/ToElement');\n\t\tiface.title = \"To Element\";\n\t}\n\n\timported(){\n\t\tlet { Output } = this.ref;\n\t\tthis.iface._element = Output.DivElement = document.createElement('div');\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\n\t\tOutput.DivElement.innerHTML = Input.String;\n\t\tOutput.Element = Output.DivElement.firstElementChild;\n\t}\n});\n\nBlackprint.registerInterface('BPIC/QRCode/Convert/ToElement',\nContext.IFace.ToElement = class extends Blackprint.Interface { });"]}